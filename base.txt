SaaS PETFRIENDLY üêæ ‚Äî Documento Base de Producto y Tecnolog√≠a 

 

0) Resumen ejecutivo 

PETFRIENDLY es una plataforma SaaS que conecta fundaciones, adoptantes y patrocinadores/padrinos para facilitar la adopci√≥n responsable y la gesti√≥n de mascotas. El MVP prioriza descubrimiento de mascotas, detalles, formularios y panel b√°sico de fundaciones. 

 

1) Identidad de producto 

 

1.1 Misi√≥n 

Promover la adopci√≥n responsable de mascotas mediante tecnolog√≠a accesible y confiable que conecte fundaciones, adoptantes y aliados, reduciendo tiempos y fricciones del proceso. 

 

 1.2 Visi√≥n 

Ser la plataforma l√≠der en LATAM para adopciones y gesti√≥n de fundaciones, con impacto medible en bienestar animal y trazabilidad de adopciones. 

 

 1.3 Prop√≥sito 

Conectar hogares y mascotas que necesitan una segunda oportunidad, generando confianza, transparencia y comunidad. 

 

 1.4 Principios de dise√±o 

- Simpleza √∫til (menos pasos, m√°s adopciones). 

- Confianza y trazabilidad (informaci√≥n clara, seguimiento). 

- Privacidad y seguridad por defecto. 

- Evolutivo (MVP ‚Üí iteraciones guiadas por datos). 

 

 2) Descripci√≥n y alcance del MVP (P1) 

 

Incluye: 

- Home (qu√© es PETFRIENDLY, navegaci√≥n, CTA). 

- PLP (Pet List Page) con filtros (ciudad, fundaci√≥n). 

- PDP (Pet Detail Page) con galer√≠a, ficha, CTA ‚ÄúQuiero adoptar‚Äù. 

- P√°gina de Fundaci√≥n (info, listados, contacto, padrinos). 

- Auth b√°sica (registro/login de usuarios y fundaciones). 

- Formularios (adopci√≥n y contacto). 

- Panel Fundaci√≥n (m√≠nimo viable): crear/editar mascotas, ver solicitudes. 

 

No incluye (post-MVP): 

- Pasarela de donaciones/padrinazgo. 

- Chat en tiempo real. 

- Verificaci√≥n KYC de fundaciones. 

- Matching inteligente. 

 

 

 3) Stakeholders y roles 

- PO: prioriza valor, define roadmap, acepta entregables. 

- UX/UI: flujos, wireframes, componentes base. 

- Front: React + Vite + Tailwind + shadcn/ui. 

- Back: Spring Boot, seguridad, API, persistencia. 

- DevOps: despliegue, CI/CD, observabilidad. 

- Fundaciones (Admins), Adoptantes (End-users), Super Admin (plataforma). 

 

 4) Arquitectura t√©cnica (alto nivel) 

 

 4.1 Stack 

- Frontend: React + Vite, Tailwind, shadcn/ui (Radix). 

- Backend: Java 21 + Spring Boot 3.x, Spring Security (JWT). 

- DB: Relacional (MySQL/PostgreSQL).  

- Storage im√°genes: S3 (o equivalente). 

- Infra (sugerida): AWS (ECS Fargate, RDS, S3, CloudFront, ALB, ACM, Route53). 

- Observabilidad: CloudWatch + OpenTelemetry (luego). 

 

 4.2 Diagrama de arquitectura 

Interfaz de usuario gr√°fica, Teams

El contenido generado por IA puede ser incorrecto. 

 

4.3 M√≥dulos backend (micro-m√≥dulos en monorepo inicial) 

users (auth, perfiles, roles). 

foundations (CRUD fundaci√≥n, verificaci√≥n manual v1). 

pets (CRUD mascota, galer√≠a). 

adoptions (solicitudes, estados). 

forms (adopci√≥n, contacto). 

media (upload/presigned URLs). 

catalog (filtros, paginaci√≥n). 

admin (super admin). 

Forma 

5) Modelo de datos (MVP) 

erDiagram 

  USER ||--o{ ADOPTION_REQUEST : "env√≠a" 

  FOUNDATION ||--o{ PET : "administra" 

  FOUNDATION ||--o{ USER : "miembros (role=FOUNDATION_ADMIN)" 

  PET ||--o{ PET_IMAGE : "tiene" 

  FOUNDATION ||--o{ CONTACT_MESSAGE : "recibe" 

 

  USER { 

    UUID id 

    string email 

    string password_hash 

    string full_name 

    string role  // VISITOR, USER, FOUNDATION_ADMIN, SUPER_ADMIN 

    string city 

    datetime created_at 

    datetime updated_at 

  } 

 

  FOUNDATION { 

    UUID id 

    string name 

    string city 

    string description 

    string contact_email 

    string website 

    boolean verified 

    datetime created_at 

  } 

 

  PET { 

    UUID id 

    UUID foundation_id 

    string name 

    string species   // dog, cat, other 

    string breed 

    string sex       // male, female 

    int age_months 

    string size      // small, medium, large 

    string temperament 

    string health 

    string city 

    string status    // available, reserved, adopted 

    text description 

    datetime created_at 

  } 

 

  PET_IMAGE { 

    UUID id 

    UUID pet_id 

    string s3_key 

    int order_index 

  } 

 

  ADOPTION_REQUEST { 

    UUID id 

    UUID pet_id 

    UUID user_id 

    string status    // submitted, in_review, approved, rejected 

    text answers_json 

    datetime created_at 

    datetime updated_at 

  } 

 

  CONTACT_MESSAGE { 

    UUID id 

    UUID foundation_id 

    string from_name 

    string from_email 

    text message 

    datetime created_at 

  } 

Forma 

6) API (v1) ‚Äî Endpoints iniciales 

Convenci√≥n: Authorization: Bearer <JWT>. Respuestas JSON. Paginaci√≥n ?page=&size=. Filtros en query. 

Auth 

POST /auth/register (usuario/fundaci√≥n) 

POST /auth/login ‚Üí { access_token, refresh_token } 

POST /auth/refresh 

Users 

GET /me 

PUT /me 

Foundations 

GET /foundations?city= 

GET /foundations/{id} 

POST /foundations (ROLE: SUPER_ADMIN o verificaci√≥n asistida) 

PUT /foundations/{id} (ROLE: FOUNDATION_ADMIN) 

Pets 

GET /pets?city=&foundationId=&species=&status=available 

GET /pets/{id} 

POST /pets (ROLE: FOUNDATION_ADMIN) 

PUT /pets/{id} (ROLE: FOUNDATION_ADMIN) 

POST /pets/{id}/images/presign (ROLE: FOUNDATION_ADMIN) ‚Üí URL firmada S3 

DELETE /pets/{id}/images/{imageId} 

Adoptions 

POST /adoptions (body referencia pet_id, answers) 

GET /adoptions/mine 

GET /adoptions/by-foundation (ROLE: FOUNDATION_ADMIN) 

PATCH /adoptions/{id} (cambiar estado) 

Contact 

POST /contact/foundation/{foundationId} 

Admin 

GET /admin/metrics (ROLE: SUPER_ADMIN) 

Errores: RFC 7807-like {type,title,status,detail}. 